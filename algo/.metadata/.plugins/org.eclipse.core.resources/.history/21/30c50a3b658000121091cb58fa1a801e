package yega.alogorithms.randomizecontraction;

import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static yega.alogorithms.randomizecontraction.RandomizeContractionAlgorithmTestData.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.hamcrest.CoreMatchers;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import yega.alogrithms.quicksort.QuickSortTest;

public class RandomizeContracionAlgorithmTest {

	RandomizeContracionAlgorithm algo;
	
	@Before
	public void setUp() {
		algo = new RandomizeContracionAlgorithm();
	}
	
	@Test
	public void verifyThatEdgeConnectedWihtVertices() {
		algo.connectVertices(V1,V3,E1);
	}
	
	@Test
	public void verifyRandomChooseOfEdge() {
		initAlgo();
		
		Edge edge = algo.selectRandomEdge();
		
		Assert.assertThat(edge, anyOf(is(E1),is(E2),is(E3),is(E4),is(E5)));
	}
	
	@Test
	public void verifyThatEdgeProperlyContracted() {
		initAlgo();
		assertThat(algo.contractEdge(E2), CoreMatchers.is(STEP1));
		assertThat(algo.contractEdge(E1), CoreMatchers.is(STEP2));
	}
	
	@Test
	public void testFindMinCut() {
		initAlgo();
		
		Integer mincut = algo.findMinCut2();
		
		assertThat(mincut, CoreMatchers.anyOf(is(2), is(3)));
	}
	
	@Test
	public void verifyProgarmmingQuestion() throws IOException {
		
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					RandomizeContracionAlgorithmTest.class
							.getResourceAsStream("/kargerMinCut.txt")));
			int e = 0;
			List<String []> data = new ArrayList<String[]>();
			while (true) {
				String line = reader.readLine();
				if (line == null) {
					break;
				}
				String[] vertices = line.split("\t");
				data.add(vertices);
			}
			
			
			algo = new RandomizeContracionAlgorithm();
			for (String[] vertices : data){
				Vertex beginVertex = new Vertex.Builder().id(vertices[0])
						.build();
				for (int i = 0; i < vertices.length; i++, e++) {
					algo.connectVertices(beginVertex,
							new Vertex.Builder().id("v" + vertices[i]).build(),
							new Edge.Builder().id("e" + e).build());
				}
			}
			
			Integer tempResult = algo.findMinCut2();
			
			System.out.println(String.format("Answer is [%d]!!!", tempResult));
	}
	
	private void initAlgo() {
		algo.connectVertices(V1, V3, E1);
		algo.connectVertices(V1, V2, E2);
		algo.connectVertices(V2, V3, E3);
		algo.connectVertices(V3, V4, E4);
		algo.connectVertices(V2, V4, E5);
	}
	
}
