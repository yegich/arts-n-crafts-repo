package yega.alogorithms.randomizecontraction;

import yega.alogorithms.randomizecontraction.Vertex.Builder;


public class Edge {

	private Vertex beginVertex;
	private Vertex endVertex;
	public String id;
	
	public Vertex getBeginVertex() {
		return beginVertex;
	}
	
	public Vertex getEndVertex() {
		return endVertex;
	}
	
	public boolean containsVertex(Vertex vertex) {
		return beginVertex == vertex || endVertex == vertex;
	}
	
	public Vertex getOpositeVertex(Vertex vertex) {
		return beginVertex == vertex ? endVertex : beginVertex; 
	}
	
	public static class Builder{
		private Edge edge;
		
		public Builder() {
			edge = new Edge();
		}
		
		public Edge build() {
			return edge;
		}
		
		public Builder vertecis(Vertex beginVertex, Vertex endVertex) {
			edge.beginVertex = beginVertex;
			edge.endVertex = endVertex;
			return this;
		}

		public Builder id(String id) {
			edge.id = id;
			return this;
		}
	}
	
	
	@Override
	public String toString() {
		return "Edge [beginVertex=" + beginVertex + ", endVertex=" + endVertex
				+ "]";
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((beginVertex == null) ? 0 : beginVertex.hashCode());
		result = prime * result
				+ ((endVertex == null) ? 0 : endVertex.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Edge other = (Edge) obj;
		if (beginVertex == null) {
			if (other.beginVertex != null)
				return false;
		} else if (!beginVertex.equals(other.beginVertex))
			return false;
		if (endVertex == null) {
			if (other.endVertex != null)
				return false;
		} else if (!endVertex.equals(other.endVertex))
			return false;
		return true;
	}
	
}
