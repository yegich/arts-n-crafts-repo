package yega.alogorithms.randomizecontraction;

import java.util.ArrayList;
import java.util.List;

public class RandomizeContractionAlgorithmTestData {

	static Vertex ONE = new Vertex.Builder().id(1.0).build();
	static Vertex TWO = new Vertex.Builder().id(2.0).build();
	static Vertex THREE = new Vertex.Builder().id(3.0).build();
	static Vertex FOUR = new Vertex.Builder().id(4.0).build();
	static Vertex FIVE = new Vertex.Builder().id(5.0).build();
	static Vertex SIX = new Vertex.Builder().id(6.0).build();
	static Vertex SEVEN = new Vertex.Builder().id(7.0).build();
	static Vertex EIGHT = new Vertex.Builder().id(8.0).build();
	
	static Edge EDGE_ONE = new Edge.Builder().id(1.0).vertecis(ONE, TWO).build();
	static Edge EDGE_TOW = new Edge.Builder().id(2.0).vertecis(ONE, THREE).build();
	static Edge EDGE_THREE = new Edge.Builder().id(3.0).vertecis(TWO, THREE).build();
	static Edge EDGE_FOUR = new Edge.Builder().id(4.0).vertecis(ONE, FOUR).build();
	static Edge EDGE_FIVE = new Edge.Builder().id(5.0).vertecis(TWO, THREE).build();
	static Edge EDGE_SIX = new Edge.Builder().id(6.0).vertecis(THREE, FOUR).build();
	static Edge EDGE_SEVEN = new Edge.Builder().id(7.0).vertecis(THREE, FIVE).build();
	static Edge EDGE_EIGHT = new Edge.Builder().id(8.0).vertecis(FOUR, SIX).build();
	static Edge EDGE_NINE = new Edge.Builder().id(9.0).vertecis(FIVE, SIX).build();
	static Edge EDGE_TEN = new Edge.Builder().id(10.0).vertecis(SIX, SEVEN).build();
	static Edge EDGE_ELEVEN = new Edge.Builder().id(11.0).vertecis(FIVE, EIGHT).build();
	static Edge EDGE_TWELV = new Edge.Builder().id(12.0).vertecis(FIVE, SEVEN).build();
	static Edge EDGE_THIRTEEN = new Edge.Builder().id(13.0).vertecis(SIX, EIGHT).build();
	static Edge EDGE_FOURTEEN = new Edge.Builder().id(14.0).vertecis(SEVEN, EIGHT).build();
	
	static List<Edge> EDGES = new ArrayList<Edge>();
	static {
		EDGES.add(EDGE_ONE);
		EDGES.add(EDGE_TOW);
		EDGES.add(EDGE_THREE);
		EDGES.add(EDGE_FOUR);
		EDGES.add(EDGE_FIVE);
		EDGES.add(EDGE_SIX);
		EDGES.add(EDGE_SEVEN);
		EDGES.add(EDGE_EIGHT);
		EDGES.add(EDGE_NINE);
		EDGES.add(EDGE_TEN);
		EDGES.add(EDGE_ELEVEN);
		EDGES.add(EDGE_TWELV);
		EDGES.add(EDGE_THIRTEEN);
		EDGES.add(EDGE_FOURTEEN);
	}
	
}
