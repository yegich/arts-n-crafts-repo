package yega.alogorithms.randomizecontraction;

import static java.lang.String.format;

import java.util.Collection;
import java.util.List;
import java.util.Set;

import org.apache.log4j.Logger;

public class MinCutAlgorithm {

	public static Logger LOG = Logger.getLogger(MinCutAlgorithm.class);
	
	private Integer minCut;
	
	public void find(Collection<Edge> edges) {
		Integer i = 0;
		RandomizeContracionAlgorithm rcAlgo = new RandomizeContracionAlgorithm();
		
		for(Edge edge : edges) {
			rcAlgo.loadEdge(edge);
		}
		
		while(true) {
			
			
			try {
				edges = rcAlgo.contractEdge(rcAlgo.selectRandomEdge());
			} catch (Exception e) {
				break;
			}
		
			LOG.info(format("Run number [%d] edges.size [%d], vertices.sezi [%d]",i++,edges.size(), rcAlgo.getGraph().keySet().size()));
			
			if(rcAlgo.getGraph().keySet().size() > 2) {
				
			} else {
				minCut = rcAlgo.getEdges().size();
				LOG.info(String.format("Min Cun on this run is [%d]", minCut));
				break;
			}
		}
	}
	
	public Integer findMinCut(Collection<Edge> edges, Integer timesToRun) {
		Integer tempMinCut = null;
		for(int i =0 ; i < timesToRun; i++) {
			find(edges);
			if(tempMinCut != null && minCut >= tempMinCut) {
				//do nothing
			} else {
				tempMinCut = minCut;
			}
		}
		
		return tempMinCut;
		
	}

	public Integer getMinCut() {
		return minCut;
	}
}
